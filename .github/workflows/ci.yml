name: C++ Component CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bazel
      uses: bazel-contrib/setup-bazel@0.15.0
      with:
        # Avoid downloading Bazel every time
        bazelisk-cache: true
        # Store build cache per workflow
        disk-cache: ${{ github.workflow }}
        # Share repository cache between workflows
        repository-cache: true
    
    - name: Build library
      run: bazel build //src:math_operations
    
    - name: Build all targets
      run: bazel build //...
    
    - name: Run all tests
      run: bazel test //... --test_output=errors
    
    - name: Validate module structure
      run: |
        echo "Validating Bazel module structure..."
        bazel query //... --output=package
        
    - name: Check code formatting (if clang-format available)
      run: |
        if command -v clang-format &> /dev/null; then
          ./tools/format_check.sh
        else
          echo "clang-format not available, skipping format check"
        fi

  trigger-renovate:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    permissions:
      contents: read
      actions: read
    
    steps:
    - name: Trigger Renovate update in meta-repo
      env:
        RENOVATE_TOKEN: ${{ secrets.RENOVATE_TOKEN }}
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        echo "Triggering Renovate update for new version: $VERSION"
        
        # Extract version number (remove 'v' prefix if present)
        VERSION_NUMBER="${VERSION#v}"
        
        # Create a release note that Renovate will pick up
        echo "Component hbf_examplecpp updated to version $VERSION_NUMBER"
        echo "Release URL: ${{ github.event.release.html_url }}"
        
        # Debug: Check if secret is accessible (without revealing the value)
        if [ -n "$RENOVATE_TOKEN" ]; then
          echo "‚úÖ RENOVATE_TOKEN secret is accessible"
          echo "Token length: ${#RENOVATE_TOKEN} characters"
          echo "Token prefix: ${RENOVATE_TOKEN:0:4}****"
        else
          echo "‚ùå RENOVATE_TOKEN secret is not accessible!"
          echo ""
          echo "Debugging information:"
          echo "- Event name: ${{ github.event_name }}"
          echo "- Repository: ${{ github.repository }}"
          echo "- Actor: ${{ github.actor }}"
          echo "- Workflow: ${{ github.workflow }}"
          echo ""
          echo "Possible issues:"
          echo "1. Secret 'RENOVATE_TOKEN' not configured in repository settings"
          echo "2. Secret name mismatch (check exact spelling and case)"
          echo "3. Repository is a fork (secrets not inherited by default)"
          echo "4. Organization-level restrictions on secret access"
          echo ""
          echo "To verify:"
          echo "- Go to Settings > Secrets and variables > Actions"
          echo "- Ensure secret name is exactly 'RENOVATE_TOKEN'"
          echo "- Check if repository is a fork and configure secrets appropriately"
          echo "- Verify no organization policies blocking secret access"
          exit 1
        fi
        
        echo "üöÄ Triggering Renovate update in meta-repository..."
        
        # Trigger Renovate run in meta-repo (MUST succeed)
        HTTP_STATUS=$(curl -s -w "%{http_code}" -o response.json -X POST \
          -H "Authorization: token $RENOVATE_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          -H "User-Agent: hbf-examplecpp-release" \
          "https://api.github.com/repos/thetanil/hbf/dispatches" \
          -d '{
            "event_type": "renovate-trigger",
            "client_payload": {
              "component": "hbf_examplecpp",
              "version": "'$VERSION_NUMBER'",
              "repository": "thetanil/hbf-examplecpp",
              "release_url": "${{ github.event.release.html_url }}",
              "triggered_by": "${{ github.actor }}",
              "workflow": "${{ github.workflow }}",
              "run_id": "${{ github.run_id }}"
            }
          }')
        
        echo "HTTP Status: $HTTP_STATUS"
        echo "Response content:"
        cat response.json 2>/dev/null || echo "No response content"
        
        # Check if the API call was successful
        if [ "$HTTP_STATUS" -eq 204 ]; then
          echo ""
          echo "‚úÖ SUCCESS: Renovate trigger completed!"
          echo "üìã Summary:"
          echo "  - Release version: $VERSION_NUMBER"
          echo "  - Target repository: thetanil/hbf"
          echo "  - Event type: renovate-trigger"
          echo "  - HTTP Status: $HTTP_STATUS (No Content - Success)"
          echo ""
          echo "üéØ The meta-repository should receive the dispatch event"
          echo "    Check the Actions tab in thetanil/hbf for the triggered workflow"
        else
          echo ""
          echo "‚ùå FAILED: Renovate trigger failed!"
          echo "üìã Diagnostic Information:"
          echo "  - HTTP Status Code: $HTTP_STATUS"
          echo "  - Token accessible: Yes (length: ${#RENOVATE_TOKEN})"
          echo "  - Target repository: thetanil/hbf"
          echo "  - Event type: renovate-trigger"
          echo "  - API endpoint: https://api.github.com/repos/thetanil/hbf/dispatches"
          echo ""
          echo "üîç Common causes:"
          echo "  - Token lacks 'repo' scope for target repository"
          echo "  - Target repository 'thetanil/hbf' doesn't exist or isn't accessible"
          echo "  - Token is expired or revoked"
          echo "  - Repository visibility/permissions mismatch"
          echo "  - Network connectivity issues"
          echo ""
          echo "üõ†Ô∏è Next steps:"
          echo "  1. Verify token has 'repo' scope"
          echo "  2. Confirm access to thetanil/hbf repository"
          echo "  3. Check token expiration date"
          echo "  4. Test token with: curl -H 'Authorization: token TOKEN' https://api.github.com/user"
          exit 1
        fi
